}
result = rbind(result, c(x1, f(x1)))
}
colnames(result) = c("xi", "f(xi)")
rownames(result) = c(0 : (nrow(result) - 1))
return(result[-1, ])
}
# Example
res = bisection(expression(x^2-2), 0,2,6)
res
# Example
res = bisection(expression(x^2*2), 0,2,6)
res
bisection = function(func, lowerLim, upperLim, iterations){
options(digits=15)
f = function(x){
eval(func)
}
if (f(lowerLim) * f(upperLim) >= 0){
return("Bolzano's theorem is not verified.")
}
if(lowerLim >= upperLim){
print("The interval limits are reversed!")
aux = lowerLim
lowerLim = upperLim
upperLim = aux
}
counter = 1
result = c(0)
while(counter <= iterations){
x1 = (lowerLim+upperLim) / 2
if(f(x1) == 0){
counter = iterations
} else{
if(f(lowerLim) * f(x1) < 0){
upperLim = x1
} else{
lowerLim = x1
}
aprox = f(x1)
counter = counter + 1
}
result = rbind(result, c(x1, f(x1)))
}
colnames(result) = c("xi", "f(xi)")
rownames(result) = c(0 : (nrow(result) - 1))
return(result[-1, ])
}
# Example
res = bisection(expression(x^2-2), 0,2,6)
res
# Example
res = bisection(expression(x^2*2), 0,2,6)
res
bisection = function(func, lowerLim, upperLim, iterations){
options(digits=15)
f = function(x){
eval(func)
}
if (f(lowerLim) * f(upperLim) >= 0){
return("Bolzano's theorem is not verified.")
}
if(lowerLim >= upperLim){
print("The interval limits are reversed!")
aux = lowerLim
lowerLim = upperLim
upperLim = aux
}
counter = 1
result = c(0)
while(counter <= iterations){
x1 = (lowerLim+upperLim) / 2
if(f(x1) == 0){
counter = iterations
} else{
if(f(lowerLim) * f(x1) < 0){
upperLim = x1
} else{
lowerLim = x1
}
aprox = f(x1)
counter = counter + 1
}
result = rbind(result, c(x1, f(x1)))
}
colnames(result) = c("xi", "f(xi)")
rownames(result) = c(0 : (nrow(result) - 1))
return(result[-1, ])
}
# Example
res = bisection(expression(x^2*2), 0,2,6)
res
bisection = function(func, lowerLim, upperLim, iterations){
options(digits=15)
f = function(x){
eval(func)
}
if (f(lowerLim) * f(upperLim) >= 0){
return("Bolzano's theorem is not verified.")
}
if(lowerLim >= upperLim){
print("The interval limits are reversed!")
aux = lowerLim
lowerLim = upperLim
upperLim = aux
}
counter = 1
result = c(0)
while(counter <= iterations){
x1 = (lowerLim+upperLim) / 2
if(f(x1) == 0){
counter = iterations
} else{
if(f(lowerLim) * f(x1) < 0){
upperLim = x1
} else{
lowerLim = x1
}
aprox = f(x1)
counter = counter + 1
}
result = rbind(result, c(x1, f(x1)))
}
colnames(result) = c("xi", "f(xi)")
rownames(result) = c(0 : (nrow(result) - 1))
return(result[-1, ])
}
# Example
res = bisection(expression(x^2-2), 0,2,6)
res
bisection = function(func, lowerLim, upperLim, iterations, digits = 15){
options(digits=digits)
f = function(x){
eval(func)
}
if (f(lowerLim) * f(upperLim) >= 0){
return("Bolzano's theorem is not verified.")
}
if(lowerLim >= upperLim){
print("The interval limits are reversed!")
aux = lowerLim
lowerLim = upperLim
upperLim = aux
}
counter = 1
result = c(0)
while(counter <= iterations){
x1 = (lowerLim+upperLim) / 2
if(f(x1) == 0){
counter = iterations
} else{
if(f(lowerLim) * f(x1) < 0){
upperLim = x1
} else{
lowerLim = x1
}
aprox = f(x1)
counter = counter + 1
}
result = rbind(result, c(x1, f(x1)))
}
colnames(result) = c("xi", "f(xi)")
rownames(result) = c(0 : (nrow(result) - 1))
return(result[-1, ])
}
# Example
res = bisection(expression(x^2-2), 0,2,6)
res
bisection = function(func, lowerLim, upperLim, iterations, digits = 15){
options(digits=digits)
f = function(x){
eval(func)
}
if (f(lowerLim) * f(upperLim) >= 0){
return("Bolzano's theorem is not verified.")
}
if(lowerLim >= upperLim){
print("The interval limits are reversed!")
aux = lowerLim
lowerLim = upperLim
upperLim = aux
}
counter = 1
result = c(0)
while(counter <= iterations){
x1 = (lowerLim+upperLim) / 2
if(f(x1) == 0){
counter = iterations
} else{
if(f(lowerLim) * f(x1) < 0){
upperLim = x1
} else{
lowerLim = x1
}
aprox = f(x1)
counter = counter + 1
}
result = rbind(result, c(x1, f(x1)))
}
colnames(result) = c("xi", "f(xi)")
rownames(result) = c(0 : (nrow(result) - 1))
return(result[-1, ])
}
# Example
res = bisection(expression(x^2-2), 0,2,6, 2)
res
bisection = function(func, lowerLim, upperLim, iterations, digits = 15){
options(digits=digits)
f = function(x){
eval(func)
}
if (f(lowerLim) * f(upperLim) >= 0){
return("Bolzano's theorem is not verified.")
}
if(lowerLim >= upperLim){
print("The interval limits are reversed!")
aux = lowerLim
lowerLim = upperLim
upperLim = aux
}
counter = 1
result = c(0)
while(counter <= iterations){
x1 = (lowerLim+upperLim) / 2
if(f(x1) == 0){
counter = iterations
} else{
if(f(lowerLim) * f(x1) < 0){
upperLim = x1
} else{
lowerLim = x1
}
aprox = f(x1)
counter = counter + 1
}
result = rbind(result, c(x1, f(x1)))
}
colnames(result) = c("xi", "f(xi)")
rownames(result) = c(0 : (nrow(result) - 1))
return(result[-1, ])
}
# Example
res = bisection(expression(x^2-2), 0,2,6)
res
bisection = function(expr, lowerLim, upperLim, iterations, digits = 15){
options(digits=digits)
if (lowerLim == upperLim)
return("Limits should not be the same.")
if (iterations < 1)
return("Iterations should be greater than 0.")
f = function(x){
eval(expr)
}
if (f(lowerLim) * f(upperLim) >= 0)
return("Bolzano's theorem is not verified.")
if(lowerLim >= upperLim){
print("The interval limits are reversed! Fixing it...")
aux = lowerLim
lowerLim = upperLim
upperLim = aux
}
counter = 1
result = matrix(0, ncol=2)
fx = 1
while(counter <= iterations){
x = (lowerLim + upperLim) / 2
fx = f(x1)
result = rbind(result, c(x1, f(x1)))
if(f(lowerLim) * f(x1) < 0){
upperLim = x
} else{
lowerLim = x
}
counter = counter + 1
}
colnames(result) = c("xi", "f(xi)")
rownames(result) = c(0 : (nrow(result) - 1))
return(result[-1, ])
}
# Example
res = bisection(expression(x^2-2), 0,2,6)
f = function(x, expr){
eval(expr)
}
checkBolzano = function(expr, lower, higher){
return(f(lower, expr) * f(higher, expr) < 0)
}
bisection = function(expr, n, limA, limB){
options(digits=15)
if (limA == limB)
return("Limits should not be the same.")
if (n < 1)
return("n should be greater than 0.")
lowerLim = limA
higherLim = limB
if (lowerLim > higherLim){
lowerLim = limB
higherLim = limA
}
if (!checkBolzano(expr, lowerLim, higherLim))
return("Bolzano's theorem is not verified.")
i = 0
fx = 1
result = matrix(0, ncol=2)
while (i < n && fx != 0){
x = (lowerLim + higherLim) / 2
fx = f(x, expr)
result = rbind(result, c(x, fx))
if (f(x, expr) * f(lowerLim, expr) < 0){
higherLim = x
} else {
lowerLim = x
}
i = i + 1
}
colnames(result) = list("xi", "f(xi)")
return(result[-1,])
}
###############################################################################
func<-expression(x^2-2)
# biseccion(a,b,n)
bisection(func, 6,0,2)
bisection = function(expr, lowerLim, upperLim, iterations, digits = 15){
options(digits=digits)
if (lowerLim == upperLim)
return("Limits should not be the same.")
if (iterations < 1)
return("Iterations should be greater than 0.")
f = function(x){
eval(expr)
}
if (f(lowerLim) * f(upperLim) >= 0)
return("Bolzano's theorem is not verified.")
if(lowerLim >= upperLim){
print("The interval limits are reversed! Fixing it...")
aux = lowerLim
lowerLim = upperLim
upperLim = aux
}
counter = 1
result = matrix(0, ncol=2)
fx = 1
while(counter <= iterations){
x = (lowerLim + upperLim) / 2
fx = f(x)
result = rbind(result, c(x1, f(x1)))
if(f(lowerLim) * f(x) < 0){
upperLim = x
} else{
lowerLim = x
}
counter = counter + 1
}
colnames(result) = c("xi", "f(xi)")
rownames(result) = c(0 : (nrow(result) - 1))
return(result[-1, ])
}
# Example
res = bisection(expression(x^2-2), 0,2,6)
bisection = function(expr, lowerLim, upperLim, iterations, digits = 15){
options(digits=digits)
if (lowerLim == upperLim)
return("Limits should not be the same.")
if (iterations < 1)
return("Iterations should be greater than 0.")
f = function(x){
eval(expr)
}
if (f(lowerLim) * f(upperLim) >= 0)
return("Bolzano's theorem is not verified.")
if(lowerLim >= upperLim){
print("The interval limits are reversed! Fixing it...")
aux = lowerLim
lowerLim = upperLim
upperLim = aux
}
counter = 1
result = matrix(0, ncol=2)
fx = 1
while(counter <= iterations){
x = (lowerLim + upperLim) / 2
fx = f(x)
result = rbind(result, c(x, f(x)))
if(f(lowerLim) * f(x) < 0){
upperLim = x
} else{
lowerLim = x
}
counter = counter + 1
}
colnames(result) = c("xi", "f(xi)")
rownames(result) = c(0 : (nrow(result) - 1))
return(result[-1, ])
}
# Example
res = bisection(expression(x^2-2), 0,2,6)
res
f = function(x, expr){
eval(expr)
}
checkBolzano = function(expr, lower, higher){
return(f(lower, expr) * f(higher, expr) < 0)
}
bisection = function(expr, n, limA, limB){
options(digits=15)
if (limA == limB)
return("Limits should not be the same.")
if (n < 1)
return("n should be greater than 0.")
lowerLim = limA
higherLim = limB
if (lowerLim > higherLim){
lowerLim = limB
higherLim = limA
}
if (!checkBolzano(expr, lowerLim, higherLim))
return("Bolzano's theorem is not verified.")
i = 0
fx = 1
result = matrix(0, ncol=2)
while (i < n && fx != 0){
x = (lowerLim + higherLim) / 2
fx = f(x, expr)
result = rbind(result, c(x, fx))
if (f(x, expr) * f(lowerLim, expr) < 0){
higherLim = x
} else {
lowerLim = x
}
i = i + 1
}
colnames(result) = list("xi", "f(xi)")
return(result[-1,])
}
###############################################################################
func<-expression(x^2-2)
# biseccion(a,b,n)
bisection(func, 6,0,2)
bisection = function(expr, lowerLim, upperLim, iterations, digits = 15){
options(digits=digits)
if (lowerLim == upperLim)
return("Limits should not be the same.")
if (iterations < 1)
return("Iterations should be greater than 0.")
f = function(x){
eval(expr)
}
if (f(lowerLim) * f(upperLim) >= 0)
return("Bolzano's theorem is not verified.")
if(lowerLim >= upperLim){
print("The interval limits are reversed! Fixing it...")
aux = lowerLim
lowerLim = upperLim
upperLim = aux
}
counter = 1
result = matrix(0, ncol=2)
fx = 1
while(counter <= iterations){
x = (lowerLim + upperLim) / 2
fx = f(x)
result = rbind(result, c(x, f(x)))
if(f(lowerLim) * f(x) < 0){
upperLim = x
} else{
lowerLim = x
}
counter = counter + 1
}
colnames(result) = c("xi", "f(xi)")
rownames(result) = c(0 : (nrow(result) - 1))
return(result[-1, ])
}
# Example
res = bisection(expression(x^2-2), 0,2,6)
res
bisection = function(expr, lowerLim, upperLim, iterations, digits = 15){
options(digits=digits)
if (lowerLim == upperLim)
return("Limits should not be the same.")
if (iterations < 1)
return("Iterations should be greater than 0.")
f = function(x){
eval(expr)
}
if (f(lowerLim) * f(upperLim) >= 0)
return("Bolzano's theorem is not verified.")
if(lowerLim >= upperLim){
print("The interval limits are reversed! Fixing it...")
aux = lowerLim
lowerLim = upperLim
upperLim = aux
}
counter = 1
result = matrix(0, ncol=2)
while(counter <= iterations){
x = (lowerLim + upperLim) / 2
result = rbind(result, c(x, f(x)))
if(f(lowerLim) * f(x) < 0){
upperLim = x
} else{
lowerLim = x
}
counter = counter + 1
}
colnames(result) = c("xi", "f(xi)")
rownames(result) = c(0 : (nrow(result) - 1))
return(result[-1, ])
}
# Example
res = bisection(expression(x^2-2), 0,2,6)
res
